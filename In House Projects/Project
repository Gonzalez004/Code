#include <iostream>
#include <allegro5/allegro.h>
#include <allegro5\allegro_image.h>
#include <allegro5/allegro_primitives.h>

using namespace std;

int main() {

	ALLEGRO_DISPLAY       *GameWindow = NULL;
	ALLEGRO_DISPLAY_MODE   disp_data;
	ALLEGRO_EVENT_QUEUE *Event_Queue = NULL;
	ALLEGRO_TIMER *Timer = NULL;
	ALLEGRO_BITMAP *bouncer = NULL;
	ALLEGRO_BITMAP *square = NULL;
	al_get_display_mode(al_get_num_display_modes() -1, &disp_data);
	
	const int FPS = 60;
	bool Key[4] = { false, false, false, false };
	bool Re_Draw = true;
	bool Do_Exit = false;
	float bouncer_x = disp_data.width/2;
	float bouncer_y = disp_data.height/2;
	float square_x = disp_data.width / 10;
	float square_y = disp_data.height / 10;
	float bouncer_dx = -4.0, bouncer_dy = 4.0;
	al_init();
	al_install_keyboard();
	al_init_image_addon();
	al_init_primitives_addon();
	al_set_new_display_flags(ALLEGRO_FULLSCREEN);

	Timer = al_create_timer(1 / FPS);
	Event_Queue = al_create_event_queue();

	square = al_create_bitmap(15, 110);
	al_set_target_bitmap(square);
	al_clear_to_color(al_map_rgb(0, 0, 500));

	bouncer = al_create_bitmap(15, 15);
	al_set_target_bitmap(bouncer);
	al_clear_to_color(al_map_rgb(50, 510, 50));

	al_set_window_position(GameWindow, 0, 0);
	al_set_window_title(GameWindow, "Ferny's Game");

	al_set_target_bitmap(al_get_backbuffer(GameWindow));

	al_register_event_source(Event_Queue, al_get_display_event_source(GameWindow));
	al_register_event_source(Event_Queue, al_get_timer_event_source(Timer));
	al_register_event_source(Event_Queue, al_get_keyboard_event_source());

	GameWindow = al_create_display(disp_data.width, disp_data.height);
	al_clear_to_color(al_map_rgb(255, 255, 255));
	al_rest(1);
	al_start_timer(Timer);
	while (!Do_Exit)
	{

		ALLEGRO_EVENT ev;
		al_wait_for_event(Event_Queue, &ev);
		if (ev.type == ALLEGRO_EVENT_TIMER) {
			cout << bouncer_dx << ", " << bouncer_dy << endl;

			if (bouncer_x < 0 || bouncer_x > 1900 - 15) {
				bouncer_dx = -bouncer_dx;
			}
			if (bouncer_y < 0 || bouncer_y > 900 - 15) {
				bouncer_dy = -bouncer_dy;
			}

			bouncer_x += bouncer_dx;
			bouncer_y += bouncer_dy;
			///////////////////////////////////////////////////////////////////////
			if (Key[0] && square_y >= 0) {
				square_y -= 4.0;
			}
			if (Key[1] && square_y <= 900 - 110) {
				square_y += 4.0;
			}
			///////////////////////////////////////////////////////////////////////
			Re_Draw = true;
		}



		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}

		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {
				///////////////////////////////////////////////////////////////////////
			case ALLEGRO_KEY_W:
				Key[0] = true;
				break;
			case ALLEGRO_KEY_S:
				Key[1] = true;
				break;
			
			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
				///////////////////////////////////////////////////////////////////////
			case ALLEGRO_KEY_W:
				Key[0] = false;
				break;
			case ALLEGRO_KEY_S:
				Key[1] = false;
				break;
				///////////////////////////////////////////////////////////////////////
			case ALLEGRO_KEY_ESCAPE:
				Do_Exit = true;
				break;
			}
		}

		if (Re_Draw && al_is_event_queue_empty(Event_Queue)) {
			Re_Draw = false;
			al_clear_to_color(al_map_rgb(0, 0, 0));
			
			
			al_draw_bitmap(square, square_x, square_y, 0);
			al_draw_bitmap(bouncer, bouncer_x, bouncer_y, 0);

			al_flip_display();
		}
	}
	
	al_destroy_bitmap(square);
	al_destroy_bitmap(bouncer);
	al_destroy_timer(Timer);
	al_destroy_display(GameWindow);
	al_destroy_event_queue(Event_Queue);


	return 0;
}
