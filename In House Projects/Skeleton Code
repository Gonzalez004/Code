#include <stdio.h>
#include <allegro5/allegro.h>
#include <allegro5/allegro_primitives.h>
#include <iostream>

using namespace std;

int main() {
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	ALLEGRO_BITMAP *square = NULL;
	ALLEGRO_BITMAP *bouncer = NULL;

	float square_x = 20;
	float square_y = 395;

	float bouncer_x = 800;
	float bouncer_y = 500;

	float bouncer_dx = -4.0, bouncer_dy = 4.0;

	bool key[4] = { false, false, false, false };

	bool redraw = true;
	bool doexit = false;

	al_init();
	al_install_keyboard();
	al_init_primitives_addon();

	timer = al_create_timer(.01);
	display = al_create_display(1900, 900); //640 480
	event_queue = al_create_event_queue();

	square = al_create_bitmap(15, 110);
	al_set_target_bitmap(square);
	al_clear_to_color(al_map_rgb(500, 0, 0));


	bouncer = al_create_bitmap(15, 15);
	al_set_target_bitmap(bouncer);
	al_clear_to_color(al_map_rgb(50, 510, 50));


	al_set_target_bitmap(al_get_backbuffer(display));

	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_timer_event_source(timer));
	al_register_event_source(event_queue, al_get_keyboard_event_source());

	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	al_start_timer(timer);

	while (!doexit)
	{

		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);
		if (ev.type == ALLEGRO_EVENT_TIMER) {
			cout << bouncer_dx << ", " << bouncer_dy << endl;

			if (bouncer_x < 0 || bouncer_x > 1900 - 15) {
				bouncer_dx = -bouncer_dx;
			}
			if (bouncer_y < 0 || bouncer_y > 900 - 15) {
				bouncer_dy = -bouncer_dy;
			}

			if (bouncer_x < 0) {
		
				if (bouncer_dx > 1 && bouncer_dx < 10) {
					bouncer_dx = bouncer_dx;
				}
				else {
					bouncer_dx = bouncer_dx;
				}
				if (bouncer_dy > 1 && bouncer_dy < 10) {
					bouncer_dy = bouncer_dy;
				}
				else {
					bouncer_dy = bouncer_dy;
				}
			}
			bouncer_x += bouncer_dx;
			bouncer_y += bouncer_dy;
///////////////////////////////////////////////////////////////////////
			if (key[0] && square_y >= 0) {
				square_y -= 4.0;
			}
			if (key[1] && square_y <= 900 - 110) {
				square_y += 4.0;
			}
			///////////////////////////////////////////////////////////////////////
			redraw = true;
		}



		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}

		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {
				///////////////////////////////////////////////////////////////////////
			case ALLEGRO_KEY_W:
				key[0] = true;
				break;
			case ALLEGRO_KEY_S:
				key[1] = true;
				break;

			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
				///////////////////////////////////////////////////////////////////////
			case ALLEGRO_KEY_W:
				key[0] = false;
				break;
			case ALLEGRO_KEY_S:
				key[1] = false;
				break;

			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}


		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;
			al_clear_to_color(al_map_rgb(0, 0, 0));

			al_draw_bitmap(square, square_x, square_y, 0);

			al_draw_bitmap(bouncer, bouncer_x, bouncer_y, 0);

			al_flip_display();
		}
	}

	al_destroy_bitmap(square);

	al_destroy_bitmap(bouncer);
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}
